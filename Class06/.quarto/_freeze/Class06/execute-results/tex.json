{
  "hash": "1287d57297fb2532bee18a5be6836d9a",
  "result": {
    "markdown": "---\ntitle: \"Class06: R Functions\"\nauthor: Hannah Kim \ndate: 2023-04-021\nformat: pdf\n---\n\n\nIn this class we will develop out own R function to calculate average grades in a fictional class.\n\nWe will start with a simplified version of the problem, just calculating the average grade of one student\n\n# Simplified Version\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example input vectors to start with\n\nstudent1 <- c(100, 100, 100, 100, 100, 100, 100, 90)\nstudent2 <- c(100, NA, 90, 90, 90, 90, 97, 80)\nstudent3 <- c(90, NA, NA, NA, NA, NA, NA, NA)\n```\n:::\n\n\nWe are going to start by calculating the average score of the homeworks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98.75\n```\n:::\n:::\n\n\nTo get the minimum score we can use which.mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100  90\n```\n:::\n\n```{.r .cell-code}\nwhich.min(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nI can do the average of the first 7 homework scores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1[1:7])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nAnother way to select the first 7 homework scores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent1[1:7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n\n```{.r .cell-code}\nstudent1[-8]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n:::\n\n\nAnother way to drop the lowest score:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#goes through student1 scores and removes the minimum value\nstudent1_drop_lowest= student1[-which.min(student1)]\nstudent1_drop_lowest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n:::\n\n\nI can get the mean of the homework scores after dropping the lowest score by doing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1_drop_lowest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nWe have our first working snippet of code!\n\nLet's try to generalize it to student2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent2 <- c(100, NA, 90, 90, 90, 90, 97, 80)\nstudent2_drop_lowest<-student2[-which.min(student2)]\nstudent2_drop_lowest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100  NA  90  90  90  90  97\n```\n:::\n:::\n\n\nThere is a way to calculate the mean droppping missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent3 <- c(90, NA, NA, NA, NA, NA, NA, NA)\nmean(student3, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\n\nWe want to know the position of the NAs. So, for student2we can use the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent2 <- c(100, NA, 90, 90, 90, 90, 97, 80)\nwhich(is.na(student2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nFor student 3:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(is.na(student3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6 7 8\n```\n:::\n:::\n\n\nFor student 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100  NA  90  90  90  90  97  80\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(is.na(student2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent2[ is.na(student2) ]  <- 0 \nstudent2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100   0  90  90  90  90  97  80\n```\n:::\n:::\n\n\nIf I use the same for student 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent3[ is.na(student3) ]  <- 0 \nstudent3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90  0  0  0  0  0  0  0\n```\n:::\n\n```{.r .cell-code}\nmean(student3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.25\n```\n:::\n:::\n\n\nThis is going to be our final working snippet of code for all students (with and without NA values)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent3 <- c(90, NA, NA, NA, NA, NA, NA, NA)\nstudent3[is.na(student3)] <- 0\nstudent3_drop_lowest <- student3[-which.min(student3)]\nmean(student3_drop_lowest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n\nWe can write it as a function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#creating a function that requires an array x\ngrade <- function(x)\n  {\n  #finds the index of the value that is NA and then changes it to 0\n  x[is.na(x)] <- 0 \n  #creates a variable that stores the average of student scores without the lowest score\n  x_drop_lowest <- x[-which.min(x)]\n  mean(x_drop_lowest)\n}\n```\n:::\n\n\nLet's apply the function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\ngrade(student2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n\n```{.r .cell-code}\ngrade(student3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n\nLet's apply our function to a gradebook from this URL: \"https://tinyurl.com/gradeinput\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nURL <- \"https://tinyurl.com/gradeinput\"\ngradebook <- read.csv(URL, row.names = 1)\nhead(gradebook)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          hw1 hw2 hw3 hw4 hw5\nstudent-1 100  73 100  88  79\nstudent-2  85  64  78  89  78\nstudent-3  83  69  77 100  77\nstudent-4  88  NA  73 100  76\nstudent-5  88 100  75  86  79\nstudent-6  89  78 100  89  77\n```\n:::\n:::\n\n\nLet's apply my function grade to the gradebook using apply and running it by rows using MARGIN = 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(gradebook,1,grade)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n student-1  student-2  student-3  student-4  student-5  student-6  student-7 \n     91.75      82.50      84.25      84.25      88.25      89.00      94.00 \n student-8  student-9 student-10 student-11 student-12 student-13 student-14 \n     93.75      87.75      79.00      86.00      91.75      92.25      87.75 \nstudent-15 student-16 student-17 student-18 student-19 student-20 \n     78.75      89.50      88.00      94.50      82.75      82.75 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "Class06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}