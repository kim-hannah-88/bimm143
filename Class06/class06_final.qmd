---
title: "Class06: R Functions"
author: Hannah Kim 
date: 2023-04-021
format: pdf
---

In this class we will develop out own R function to calculate average grades in a fictional class.

We will start with a simplified version of the problem, just calculating the average grade of one student

Simplified Version

```{r}
# Example input vectors to start with

student1 <- c(100, 100, 100, 100, 100, 100, 100, 90) 
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80) 
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We are going to start by calculating the average score of the homeworks.

```{r}
mean(student1)
```

To get the minimum score we can use which.mean.

```{r}
student1 
which.min(student1)
```

I can do the average of the first 7 homework scores:

```{r}
mean(student1[1:7])
```

Another way to select the first 7 homework scores:

```{r}
student1[1:7] 
student1[-8]
```

Another way to drop the lowest score:

```{r}
#goes through student1 scores and removes the minimum value 
student1_drop_lowest <- student1[-which.min(student1)] 

```

I can get the mean of the homework scores after dropping the lowest score by doing.

```{r}
 mean(student1_drop_lowest)
```

We have our first working snippet of code!

Let's try to generalize it to student2:

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80) 
student2_drop_lowest<-student2[-which.min(student2)] 
student2_drop_lowest
```

There is a way to calculate the mean droppping missing values

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA) 
mean(student3, na.rm = TRUE)
```

We want to know the position of the NAs. So, for student2we can use the following.

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80) 
which(is.na(student2))
```

For student 3:

```{r}
which(is.na(student3))
```

For student 2:

```{r}
student2
```

```{r}
which(is.na(student2))
```

```{r}
student2[ is.na(student2) ] <- 0 
student2
```

If I use the same for student 3

```{r}
student3[ is.na(student3) ] <- 0 
student3 
mean(student3)
```

This is going to be our final working snippet of code for all students (with and without NA values)

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA) 
student3[is.na(student3)] <- 0 
student3_drop_lowest <- student3[-which.min(student3)] 
mean(student3_drop_lowest)

```

# Q1

We can write it as a function:

```{r}
 #creating a function that requires an array x 
grade <- function(x) 
{
  #finds the index of the value that is NA and then changes it to 0 
  x[is.na(x)] <- 0 
  #creates a variable that stores the average of student scores without the lowest score   
  x_drop_lowest <- x[-which.min(x)] 
  mean(x_drop_lowest) }


```

Let's apply the function

```{r}
grade(student1) 
grade(student2) 
grade(student3)
```

Let's apply our function to a gradebook from this URL: "https://tinyurl.com/gradeinput"

```{r}
 URL <- "https://tinyurl.com/gradeinput" 
 gradebook <- read.csv(URL, row.names = 1) 
 head(gradebook)
```

Let's apply my function grade to the gradebook using apply and running it by rows using MARGIN = 1.

```{r}
apply(gradebook,1,grade)
```

# Q2

We can write it as a function

```{r}
max(apply(gradebook,1,grade))
```

The maximum score is 94.5

```{r}
which.max(apply(gradebook,1,grade))
```

The student getting the maximum overall score was student 18.

# Q3

First we are going to mask NA values with zeros

```{r}
#replacing all NAs with 0 but applying it to dataframe instead of array 
gradebook[is.na(gradebook)] <- 0
```

Now we apply the mean function to the gradebook

```{r}
apply(gradebook,2,mean)
```

The toughest homework will be homework 2 considering the mean and considering the missing homework as 0.

Having zeros for missing homework is too strict and is not a good representation of the homework difficulty.
