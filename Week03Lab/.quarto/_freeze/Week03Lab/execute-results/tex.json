{
  "hash": "ac2150c6632ca95398fc67509d13cf7c",
  "result": {
    "markdown": "---\ntitle: \"Week04 Lab: R Language Basics\"\nauthor: Hannah Kim\ndate: 04-25-23\nformat: pdf \n---\n\n\n# Simple Calculations\n\nLet's practice basic arithmetic functions and use R as a calculator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5+3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n5-3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n5*3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\n5/3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.666667\n```\n:::\n:::\n\n\n# Saving Your Answers\n\nAssigning values to an object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Form for creating objects: objectName <- value  \nx <- 3 * 4  \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthis_is_a_really_long_name <- 2.5  \nr_rocks <- 2 ^ 3  \nthis_is_a_really_long_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n\n```{.r .cell-code}\n#calling rrocks would not work because of a type\n```\n:::\n\n\n# Calling functions\n\nR has many basic functions that are built in such as seq to create a sequences of numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#functionName(arg1 = val1, arg2 = val2, and so on)\nseq(1,10)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nYou can also create sequences with different step sizes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1,10, by=2)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5 7 9\n```\n:::\n\n```{.r .cell-code}\n#not all functios require an argument \nexample(seq)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nseq> seq(0, 1, length.out = 11)\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\nseq> seq(stats::rnorm(20)) # effectively 'along'\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\nseq> seq(1, 9, by = 2)     # matches 'end'\n[1] 1 3 5 7 9\n\nseq> seq(1, 9, by = pi)    # stays below 'end'\n[1] 1.000000 4.141593 7.283185\n\nseq> seq(1, 6, by = 3)\n[1] 1 4\n\nseq> seq(1.575, 5.125, by = 0.05)\n [1] 1.575 1.625 1.675 1.725 1.775 1.825 1.875 1.925 1.975 2.025 2.075 2.125\n[13] 2.175 2.225 2.275 2.325 2.375 2.425 2.475 2.525 2.575 2.625 2.675 2.725\n[25] 2.775 2.825 2.875 2.925 2.975 3.025 3.075 3.125 3.175 3.225 3.275 3.325\n[37] 3.375 3.425 3.475 3.525 3.575 3.625 3.675 3.725 3.775 3.825 3.875 3.925\n[49] 3.975 4.025 4.075 4.125 4.175 4.225 4.275 4.325 4.375 4.425 4.475 4.525\n[61] 4.575 4.625 4.675 4.725 4.775 4.825 4.875 4.925 4.975 5.025 5.075 5.125\n\nseq> seq(17) # same as 1:17, or even better seq_len(17)\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17\n```\n:::\n\n```{.r .cell-code}\ndate()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tue Apr 25 11:55:18 2023\"\n```\n:::\n:::\n\n\n# Getting Help in R\n\nThere is a built in help function to read the descriptions of a function that you know the name of and want more information about\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(log)\n?log\n```\n:::\n\n\nFor example if we want to know what cross tabulate does:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp.search(\"cross tabulate\")\n??\"cross tabulate\"\n```\n:::\n\n\n# Vectors, Vectoring, and Indexing\n\nThe length function returns the length of a vector. Unlike other coding languages there is no scalar type and instead values like 'word' or 3.1 are stored as a vector of length 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(3.1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nTo create longer vectors, we combine values with the function c():\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(56, 95.3, 0.4)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 56.0 95.3  0.4\n```\n:::\n\n```{.r .cell-code}\n#or\ny <- c(3.2, 1.1, 0.2)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.2 1.1 0.2\n```\n:::\n:::\n\n\n## Vectorization\n\nVectorization lets us loop over the elements in a vector with writing an explicit loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx+y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 59.2 96.4  0.6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx-y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 52.8 94.2  0.2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx/y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17.50000 86.63636  2.00000\n```\n:::\n:::\n\n\nIn addition to operators like `+` and `*`, many of R's math functions (e.g., `sqrt()`, `round()`, `log()`, etc.) are all vectorized:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.4833148 9.7621719 0.6324555\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nround(sqrt(x), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.483 9.762 0.632\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x)/2 + 1 # note how we can combined vectorized operations\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.0126758 3.2785149 0.5418546\n```\n:::\n:::\n\n\n## Vector Indexing\n\nWe can use indexing to get a specific element in the vector to retrieve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(56, 95.3, 0.4)\nx[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 95.3\n```\n:::\n:::\n\n\nThe index positions starts at 1. R's vectors are 1-indexed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 56\n```\n:::\n:::\n\n\nIf you try to retrieve an element that does not exist in the vector it will return N/A\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nWe can also change elements by combining indexing and assignment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[3] <- 0.5\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 56.0 95.3  0.5\n```\n:::\n:::\n\n\n# Version of R used\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.3  fastmap_1.1.1   cli_3.6.1       tools_4.2.3    \n [5] htmltools_0.5.5 yaml_2.3.7      rmarkdown_2.21  knitr_1.42     \n [9] xfun_0.38       digest_0.6.31   jsonlite_1.8.4  rlang_1.1.0    \n[13] evaluate_0.20  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}