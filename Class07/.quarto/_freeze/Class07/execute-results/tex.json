{
  "hash": "5d113e1db20649e55ebaf70f1a2c96eb",
  "result": {
    "markdown": "---\ntitle: \"Class07\"\nauthor: Hannah Kim\ndate: 04-26-23\nformat: pdf\n---\n\n\nImporting Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://tinyurl.com/UK-foods\"\nx <- read.csv(url)\n```\n:::\n\n\n## **Q1**. How many rows and columns are in your new data frame named `x`? What R functions could you use to answer this questions?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Complete the following code to find out how many rows and columns are in x?\ndim(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17  5\n```\n:::\n:::\n\n\nThere are 17 rows and 5 columns in x.\n\n# Checking Your Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Preview the first 6 rows\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               X England Wales Scotland N.Ireland\n1         Cheese     105   103      103        66\n2  Carcass_meat      245   227      242       267\n3    Other_meat      685   803      750       586\n4           Fish     147   160      122        93\n5 Fats_and_oils      193   235      184       209\n6         Sugars     156   175      147       139\n```\n:::\n:::\n\n\nThe row names are incorrectly placed in the first column of our 'x' data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note how the minus indexing works\nrownames(x) <- x[,1]\nx <- x[,-1]\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               England Wales Scotland N.Ireland\nCheese             105   103      103        66\nCarcass_meat       245   227      242       267\nOther_meat         685   803      750       586\nFish               147   160      122        93\nFats_and_oils      193   235      184       209\nSugars             156   175      147       139\n```\n:::\n\n```{.r .cell-code}\n#or We could solve this problem like this\nx <- read.csv(url, row.names=1)\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               England Wales Scotland N.Ireland\nCheese             105   103      103        66\nCarcass_meat       245   227      242       267\nOther_meat         685   803      750       586\nFish               147   160      122        93\nFats_and_oils      193   235      184       209\nSugars             156   175      147       139\n```\n:::\n:::\n\n\nWe can check the dimensions again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17  4\n```\n:::\n:::\n\n\n## **Q2.** Which approach to solving the \\'row-names problem\\' mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?\n\nAn example when we select the wrong number\n\n# Example of hierarchical clustering\n\nLet's Use the same data as before, which we stored in 'x'. We will use the 'hclust()' function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        Cheese Carcass_meat  Other_meat        Fish\nCarcass_meat         307.73040                                     \nOther_meat          1231.01950     940.85121                       \nFish                  78.12170     242.42318  1157.72449           \nFats_and_oils        228.42504      97.44742  1013.49544  158.24348\nSugars               122.67844     189.82624  1112.49404   55.19964\nFresh_potatoes      1456.75118    1155.83995   489.82752 1385.22958\nFresh_Veg            242.28289     148.07093  1003.77189  164.80898\nOther_Veg            739.94865     464.13145   506.63892  663.80795\nProcessed_potatoes   216.74640      98.33107  1018.46453  151.29441\nProcessed_Veg        510.14606     213.96962   729.06927  437.83559\nFresh_fruit         1778.24211    1496.47018   579.68785 1703.33203\nCereals             2818.19002    2517.03854  1599.25545 2745.19762\nBeverages             77.87811     378.39265  1305.22565  150.15326\nSoft_drinks         2677.93409    2374.34265  1483.91846 2608.79551\nAlcoholic_drinks     584.86751     377.47053   701.67585  515.62486\nConfectionery         80.17481     382.78715  1309.44683  155.46382\n                    Fats_and_oils      Sugars Fresh_potatoes  Fresh_Veg \nCarcass_meat                                                            \nOther_meat                                                              \nFish                                                                    \nFats_and_oils                                                           \nSugars                   106.00943                                      \nFresh_potatoes          1229.20706 1334.72619                           \nFresh_Veg                 95.00000  134.53996      1239.79635           \nOther_Veg                524.71135  621.56737       792.35598  504.18548\nProcessed_potatoes        53.18834  100.90094      1248.26159  105.85840\nProcessed_Veg            289.52202  389.66781       964.22145  292.37989\nFresh_fruit             1566.40959 1662.13267       704.87942 1543.03014\nCereals                 2595.14142 2697.54611      1442.95010 2590.81686\nBeverages                296.89224  193.66208      1522.01675  313.71962\nSoft_drinks             2458.85237 2559.57008      1345.14126 2461.56292\nAlcoholic_drinks         413.85505  484.45640      1047.04059  376.05452\nConfectionery            302.77054  198.88187      1528.96566  319.82339\n                    Other_Veg  Processed_potatoes  Processed_Veg  Fresh_fruit \nCarcass_meat                                                                  \nOther_meat                                                                    \nFish                                                                          \nFats_and_oils                                                                 \nSugars                                                                        \nFresh_potatoes                                                                \nFresh_Veg                                                                     \nOther_Veg                                                                     \nProcessed_potatoes   534.99252                                                \nProcessed_Veg        255.75574           296.28702                            \nFresh_fruit         1044.39791          1571.59473     1283.17887             \nCereals             2092.76301          2602.98483     2308.43194   1123.54350\nBeverages            812.93235           290.29296      583.17922   1853.23123\nSoft_drinks         1977.90521          2461.59501     2172.76000   1076.38004\nAlcoholic_drinks     267.94402           405.78443      258.00581   1227.31210\nConfectionery        818.36667           293.83158      587.97194   1857.78013\n                      Cereals   Beverages Soft_drinks  Alcoholic_drinks \nCarcass_meat                                                            \nOther_meat                                                              \nFish                                                                    \nFats_and_oils                                                           \nSugars                                                                  \nFresh_potatoes                                                          \nFresh_Veg                                                               \nOther_Veg                                                               \nProcessed_potatoes                                                      \nProcessed_Veg                                                           \nFresh_fruit                                                             \nCereals                                                                 \nBeverages           2891.08907                                          \nSoft_drinks          357.94413 2751.36693                               \nAlcoholic_drinks    2298.64199  659.16386   2174.53420                  \nConfectionery       2895.90349   14.38749   2754.92087         661.52400\n```\n:::\n\n```{.r .cell-code}\nclustering <- hclust(dist(x))\nclustering \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nhclust(d = dist(x))\n\nCluster method   : complete \nDistance         : euclidean \nNumber of objects: 17 \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}